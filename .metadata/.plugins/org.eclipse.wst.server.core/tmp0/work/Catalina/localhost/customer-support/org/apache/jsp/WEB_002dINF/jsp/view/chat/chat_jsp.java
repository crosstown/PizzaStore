/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-04-23 19:47:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.view.chat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(8);
    _jspx_dependants.put("/WEB-INF/jsp/base.jspf", Long.valueOf(1461440657956L));
    _jspx_dependants.put("/WEB-INF/tags/template/basic.tag", Long.valueOf(1461440657954L));
    _jspx_dependants.put("/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.2.jar", Long.valueOf(1461440657975L));
    _jspx_dependants.put("/WEB-INF/tld/wrox.tld", Long.valueOf(1461440657880L));
    _jspx_dependants.put("jar:file:/C:/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/customer-support/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.2.jar!/META-INF/fmt.tld", Long.valueOf(1343834218000L));
    _jspx_dependants.put("/WEB-INF/tags/template/main.tag", Long.valueOf(1461440657951L));
    _jspx_dependants.put("jar:file:/C:/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/customer-support/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.2.jar!/META-INF/c.tld", Long.valueOf(1343834218000L));
    _jspx_dependants.put("jar:file:/C:/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/customer-support/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.2.jar!/META-INF/fn.tld", Long.valueOf(1343834218000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      if (_jspx_meth_template_005fbasic_005f0(_jspx_page_context))
        return;
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_template_005fbasic_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  template:basic
    org.apache.jsp.tag.web.template.basic_tag _jspx_th_template_005fbasic_005f0 = (new org.apache.jsp.tag.web.template.basic_tag());
    _jsp_getInstanceManager().newInstance(_jspx_th_template_005fbasic_005f0);
    _jspx_th_template_005fbasic_005f0.setJspContext(_jspx_page_context);
    // /WEB-INF/jsp/view/chat/chat.jsp(2,0) name = htmlTitle type = java.lang.String reqTime = true required = true fragment = false deferredValue = false expectedTypeName = java.lang.String deferredMethod = false methodSignature = null
    _jspx_th_template_005fbasic_005f0.setHtmlTitle("Support Chat");
    // /WEB-INF/jsp/view/chat/chat.jsp(2,0) name = bodyTitle type = java.lang.String reqTime = true required = true fragment = false deferredValue = false expectedTypeName = java.lang.String deferredMethod = false methodSignature = null
    _jspx_th_template_005fbasic_005f0.setBodyTitle("Support Chat");
    javax.servlet.jsp.tagext.JspFragment _jspx_temp0 = new Helper( 0, _jspx_page_context, _jspx_th_template_005fbasic_005f0, null);
    // /WEB-INF/jsp/view/chat/chat.jsp(2,0) name = extraHeadContent type = null reqTime = true required = false fragment = true deferredValue = false expectedTypeName = java.lang.String deferredMethod = false methodSignature = null
    _jspx_th_template_005fbasic_005f0.setExtraHeadContent(_jspx_temp0);
    _jspx_th_template_005fbasic_005f0.setJspBody(new Helper( 1, _jspx_page_context, _jspx_th_template_005fbasic_005f0, null));
    _jspx_th_template_005fbasic_005f0.doTag();
    _jsp_getInstanceManager().destroyInstance(_jspx_th_template_005fbasic_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.tagext.JspTag _jspx_parent, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f0.setParent(new javax.servlet.jsp.tagext.TagAdapter((javax.servlet.jsp.tagext.SimpleTag) _jspx_parent));
    // /WEB-INF/jsp/view/chat/chat.jsp(5,20) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f0.setValue("/resource/stylesheet/chat.css");
    int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
    if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.tagext.JspTag _jspx_parent, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f1.setParent(new javax.servlet.jsp.tagext.TagAdapter((javax.servlet.jsp.tagext.SimpleTag) _jspx_parent));
    // /WEB-INF/jsp/view/chat/chat.jsp(75,29) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f1.setValue((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("/chat/${chatSessionId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
    int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
    if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
    return false;
  }

  private class Helper
      extends org.apache.jasper.runtime.JspFragmentHelper
  {
    private javax.servlet.jsp.tagext.JspTag _jspx_parent;
    private int[] _jspx_push_body_count;

    public Helper( int discriminator, javax.servlet.jsp.JspContext jspContext, javax.servlet.jsp.tagext.JspTag _jspx_parent, int[] _jspx_push_body_count ) {
      super( discriminator, jspContext, _jspx_parent );
      this._jspx_parent = _jspx_parent;
      this._jspx_push_body_count = _jspx_push_body_count;
    }
    public boolean invoke0( javax.servlet.jsp.JspWriter out ) 
      throws java.lang.Throwable
    {
      out.write("<link rel=\"stylesheet\"\n");
      out.write("              href=\"");
      if (_jspx_meth_c_005furl_005f0(_jspx_parent, _jspx_page_context))
        return true;
      out.write("\" />\n");
      out.write("        <script src=\"http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/js/bootstrap.min.js\"></script>");
      return false;
    }
    public boolean invoke1( javax.servlet.jsp.JspWriter out ) 
      throws java.lang.Throwable
    {
      out.write("<div id=\"chatContainer\">\n");
      out.write("            <div id=\"chatLog\">\n");
      out.write("\n");
      out.write("            </div>\n");
      out.write("            <div id=\"messageContainer\">\n");
      out.write("                <textarea id=\"messageArea\"></textarea>\n");
      out.write("            </div>\n");
      out.write("            <div id=\"buttonContainer\">\n");
      out.write("                <button class=\"btn btn-primary\" onclick=\"send();\">Send</button>\n");
      out.write("                <button class=\"btn\" onclick=\"disconnect();\">Disconnect</button>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        <div id=\"modalError\" class=\"modal hide fade\">\n");
      out.write("            <div class=\"modal-header\">\n");
      out.write("                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n");
      out.write("                <h3>Error</h3>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"modal-body\" id=\"modalErrorBody\">A blah error occurred.</div>\n");
      out.write("            <div class=\"modal-footer\">\n");
      out.write("                <button class=\"btn btn-primary\" data-dismiss=\"modal\">OK</button>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        <script type=\"text/javascript\" language=\"javascript\">\n");
      out.write("            var send, disconnect;\n");
      out.write("            $(document).ready(function() {\n");
      out.write("                var modalError = $(\"#modalError\");\n");
      out.write("                var modalErrorBody = $(\"#modalErrorBody\");\n");
      out.write("                var chatLog = $('#chatLog');\n");
      out.write("                var messageArea = $('#messageArea');\n");
      out.write("                var username = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.username}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\n");
      out.write("                var otherJoined = false;\n");
      out.write("\n");
      out.write("                if(!(\"WebSocket\" in window)) {\n");
      out.write("                    modalErrorBody.text('WebSockets are not supported in this ' +\n");
      out.write("                            'browser. Try Internet Explorer 10 or the latest ' +\n");
      out.write("                            'versions of Mozilla Firefox or Google Chrome.');\n");
      out.write("                    modalError.modal('show');\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var infoMessage = function(m) {\n");
      out.write("                    chatLog.append($('<div>').addClass('informational')\n");
      out.write("                            .text(moment().format('h:mm:ss a') + ': ' + m));\n");
      out.write("                };\n");
      out.write("                infoMessage('Connecting to the chat server...');\n");
      out.write("\n");
      out.write("                var objectMessage = function(message) {\n");
      out.write("                    var log = $('<div>');\n");
      out.write("                    var date = message.timestamp == null ? '' :\n");
      out.write("                            moment.unix(message.timestamp).format('h:mm:ss a');\n");
      out.write("                    if(message.user != null) {\n");
      out.write("                        var c = message.user == username ? 'user-me' : 'user-you';\n");
      out.write("                        log.append($('<span>').addClass(c)\n");
      out.write("                                        .text(date+' '+message.user+':\\xA0'))\n");
      out.write("                                .append($('<span>').text(message.content));\n");
      out.write("                    } else {\n");
      out.write("                        log.addClass(message.type == 'ERROR' ? 'error' :\n");
      out.write("                                'informational')\n");
      out.write("                                .text(date + ' ' + message.content);\n");
      out.write("                    }\n");
      out.write("                    chatLog.append(log);\n");
      out.write("                };\n");
      out.write("\n");
      out.write("                var server;\n");
      out.write("                try {\n");
      out.write("                    server = new WebSocket('ws://' + window.location.host +\n");
      out.write("                            '");
      if (_jspx_meth_c_005furl_005f1(_jspx_parent, _jspx_page_context))
        return true;
      out.write("');\n");
      out.write("                    server.binaryType = 'arraybuffer';\n");
      out.write("                } catch(error) {\n");
      out.write("                    modalErrorBody.text(error);\n");
      out.write("                    modalError.modal('show');\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                server.onopen = function(event) {\n");
      out.write("                    infoMessage('Connected to the chat server.');\n");
      out.write("                };\n");
      out.write("\n");
      out.write("                server.onclose = function(event) {\n");
      out.write("                    if(server != null)\n");
      out.write("                        infoMessage('Disconnected from the chat server.');\n");
      out.write("                    server = null;\n");
      out.write("                    if(!event.wasClean || event.code != 1000) {\n");
      out.write("                        modalErrorBody.text('Code ' + event.code + ': ' +\n");
      out.write("                                event.reason);\n");
      out.write("                        modalError.modal('show');\n");
      out.write("                    }\n");
      out.write("                };\n");
      out.write("\n");
      out.write("                server.onerror = function(event) {\n");
      out.write("                    modalErrorBody.text(event.data);\n");
      out.write("                    modalError.modal('show');\n");
      out.write("                };\n");
      out.write("\n");
      out.write("                server.onmessage = function(event) {\n");
      out.write("                    if(event.data instanceof ArrayBuffer) {\n");
      out.write("                        var message = JSON.parse(String.fromCharCode.apply(\n");
      out.write("                                null, new Uint8Array(event.data)\n");
      out.write("                        ));\n");
      out.write("                        objectMessage(message);\n");
      out.write("                        if(message.type == 'JOINED') {\n");
      out.write("                            otherJoined = true;\n");
      out.write("                            if(username != message.user)\n");
      out.write("                                infoMessage('You are now chatting with ' +\n");
      out.write("                                        message.user + '.');\n");
      out.write("                        }\n");
      out.write("                    } else {\n");
      out.write("                        modalErrorBody.text('Unexpected data type [' +\n");
      out.write("                                typeof(event.data) + '].');\n");
      out.write("                        modalError.modal('show');\n");
      out.write("                    }\n");
      out.write("                };\n");
      out.write("\n");
      out.write("                send = function() {\n");
      out.write("                    if(server == null) {\n");
      out.write("                        modalErrorBody.text('You are not connected!');\n");
      out.write("                        modalError.modal('show');\n");
      out.write("                    } else if(!otherJoined) {\n");
      out.write("                        modalErrorBody.text(\n");
      out.write("                                'The other user has not joined the chat yet.');\n");
      out.write("                        modalError.modal('show');\n");
      out.write("                    } else if(messageArea.get(0).value.trim().length > 0) {\n");
      out.write("                        var message = {\n");
      out.write("                            timestamp: new Date(), type: 'TEXT', user: username,\n");
      out.write("                            content: messageArea.get(0).value\n");
      out.write("                        };\n");
      out.write("                        try {\n");
      out.write("                            var json = JSON.stringify(message);\n");
      out.write("                            var length = json.length;\n");
      out.write("                            var buffer = new ArrayBuffer(length);\n");
      out.write("                            var array = new Uint8Array(buffer);\n");
      out.write("                            for(var i = 0; i < length; i++) {\n");
      out.write("                                array[i] = json.charCodeAt(i);\n");
      out.write("                            }\n");
      out.write("                            server.send(buffer);\n");
      out.write("                            messageArea.get(0).value = '';\n");
      out.write("                        } catch(error) {\n");
      out.write("                            modalErrorBody.text(error);\n");
      out.write("                            modalError.modal('show');\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                };\n");
      out.write("\n");
      out.write("                disconnect = function() {\n");
      out.write("                    if(server != null) {\n");
      out.write("                        infoMessage('Disconnected from the chat server.');\n");
      out.write("                        server.close();\n");
      out.write("                        server = null;\n");
      out.write("                    }\n");
      out.write("                };\n");
      out.write("\n");
      out.write("                window.onbeforeunload = disconnect;\n");
      out.write("            });\n");
      out.write("        </script>\n");
      out.write("    ");
      return false;
    }
    public void invoke( java.io.Writer writer )
      throws javax.servlet.jsp.JspException
    {
      javax.servlet.jsp.JspWriter out = null;
      if( writer != null ) {
        out = this.jspContext.pushBody(writer);
      } else {
        out = this.jspContext.getOut();
      }
      try {
        Object _jspx_saved_JspContext = this.jspContext.getELContext().getContext(javax.servlet.jsp.JspContext.class);
        this.jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,this.jspContext);
        switch( this.discriminator ) {
          case 0:
            invoke0( out );
            break;
          case 1:
            invoke1( out );
            break;
        }
        jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,_jspx_saved_JspContext);
      }
      catch( java.lang.Throwable e ) {
        if (e instanceof javax.servlet.jsp.SkipPageException)
            throw (javax.servlet.jsp.SkipPageException) e;
        throw new javax.servlet.jsp.JspException( e );
      }
      finally {
        if( writer != null ) {
          this.jspContext.popBody();
        }
      }
    }
  }
}
